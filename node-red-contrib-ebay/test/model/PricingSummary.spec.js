/**
 * Fulfillment API
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * OpenAPI spec version: v1.17.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FulfillmentApi);
  }
}(this, function(expect, FulfillmentApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new FulfillmentApi.PricingSummary();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PricingSummary', function() {
    it('should create an instance of PricingSummary', function() {
      // uncomment below and update the code to test PricingSummary
      //var instane = new FulfillmentApi.PricingSummary();
      //expect(instance).to.be.a(FulfillmentApi.PricingSummary);
    });

    it('should have the property adjustment (base name: "adjustment")', function() {
      // uncomment below and update the code to test the property adjustment
      //var instane = new FulfillmentApi.PricingSummary();
      //expect(instance).to.be();
    });

    it('should have the property deliveryCost (base name: "deliveryCost")', function() {
      // uncomment below and update the code to test the property deliveryCost
      //var instane = new FulfillmentApi.PricingSummary();
      //expect(instance).to.be();
    });

    it('should have the property deliveryDiscount (base name: "deliveryDiscount")', function() {
      // uncomment below and update the code to test the property deliveryDiscount
      //var instane = new FulfillmentApi.PricingSummary();
      //expect(instance).to.be();
    });

    it('should have the property fee (base name: "fee")', function() {
      // uncomment below and update the code to test the property fee
      //var instane = new FulfillmentApi.PricingSummary();
      //expect(instance).to.be();
    });

    it('should have the property priceDiscountSubtotal (base name: "priceDiscountSubtotal")', function() {
      // uncomment below and update the code to test the property priceDiscountSubtotal
      //var instane = new FulfillmentApi.PricingSummary();
      //expect(instance).to.be();
    });

    it('should have the property priceSubtotal (base name: "priceSubtotal")', function() {
      // uncomment below and update the code to test the property priceSubtotal
      //var instane = new FulfillmentApi.PricingSummary();
      //expect(instance).to.be();
    });

    it('should have the property tax (base name: "tax")', function() {
      // uncomment below and update the code to test the property tax
      //var instane = new FulfillmentApi.PricingSummary();
      //expect(instance).to.be();
    });

    it('should have the property total (base name: "total")', function() {
      // uncomment below and update the code to test the property total
      //var instane = new FulfillmentApi.PricingSummary();
      //expect(instance).to.be();
    });

  });

}));
